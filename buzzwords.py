import re
import pandas as pd

#reviews= pd.read_csv('data/reviews_test.csv')
reviews=pd.read_csv('data/reviews_merged_no_nulls.csv')
book_profiles=pd.read_csv('data/book_profiles.csv')
#book_profiles = pd.read_csv('data/book_profiles_test.csv')


buzzwords_list=[
'DNF',
 'a real tear-jerker',
 'absorbing',
 'accessible',
 'acclaimed',
 'adorable',
 'all over the place',
 'ambitious',
 'angst',
 'angsty',
 'annoyed',
 'annoying',
 'anticipated',
 'appealing',
 'arc',
 'atrocity',
 'attention',
 'average',
 'awkward',
 'awkwardly',
 'awkwardness',
 'bad',
 'barbarian',
 'barbarous',
 'beautiful',
 'beloved',
 'best',
 'better',
 'biased',
 'bizarre',
 'bland',
 'blasphemous',
 'blasphemy',
 'blushed',
 'blushing',
 'booktok',
 'boring',
 'botched',
 'bothered',
 'bothers',
 'bothersome',
 'breaking the fourth wall',
 'breath of fresh air',
 'brilliant',
 'brutal',
 'captivated',
 'captivating',
 'capture',
 'captured',
 'carefully crafted',
 'catalyst',
 'catastrophic',
 'charisma',
 'charismatic',
 'charming',
 'classic',
 'cliche',
 'cliches',
 'clichÃ©',
 'cliffhanger',
 'clunky',
 'comfort',
 'common',
 'compelling',
 'compensation',
 'complex',
 'complicated',
 'contemporary',
 'controversial',
 'cozy',
 'cringe',
 'cringy',
 'cute',
 'cutest',
 'cynical',
 'daft',
 'damage',
 'damaged',
 'damaging',
 'dated',
 'deep',
 'defiant',
 'delicious',
 'delighted',
 'delightful',
 'deliver',
 'delivered',
 'detailed',
 'did not finish',
 'different',
 'disappointed ',
 'disappointing',
 'disastrous',
 'discomfort',
 'disturbed',
 'disturbing',
 'diverse',
 'diversed',
 'diversified',
 'domestic',
 'downhill',
 'drag',
 'dragged on',
 'drama',
 'dramatic',
 'dream',
 'dreamed',
 'dreaming',
 'dull',
 'dumb',
 'dying',
 'easy',
 'eccentric',
 'edgy',
 'effervescent',
 'electrifying',
 'emotional',
 'energetic',
 'enigmatic',
 'enjoyable',
 'enjoyed',
 'enjoying',
 'entertained',
 'entertaining',
 'epic',
 'evocative',
 'exceptional',
 'explosive',
 'extra',
 'fake',
 'familiar',
 'famous',
 'fantastic',
 'fantastical',
 'fascinating',
 'fateful',
 'favorite',
 'feel good',
 'feminist',
 'fierce',
 'filler',
 'flaw',
 'flawed',
 'flawless',
 'forgettable',
 'formidable',
 'forward',
 'fourth wall break',
 'fun',
 'funny',
 'fuzzy',
 'gaslight',
 'gaslighting',
 'gatekeep',
 'gatekeeping',
 'genre-defining',
 'giddiness',
 'giddy',
 'girlboss',
 'glamarous',
 'glee',
 'grate',
 'great',
 'gripping',
 'groundbreaking',
 'gush',
 'hair-raising',
 'hate',
 'hated',
 'headache',
 'heart',
 'hideous',
 'hilarious',
 'hit the mark',
 'hooked',
 'hopeful',
 'horrendous',
 'horrific',
 'hype',
 'iffy',
 'immaculate',
 'immersed',
 'immersive',
 'important',
 'incomparable',
 'incredible',
 'indescribable',
 'indifferent',
 'infuriating',
 'innovative',
 'inspiring',
 'interesting',
 'intimate',
 'invested',
 'irritated',
 'irritating',
 'judgemental',
 'lack',
 'lacked',
 'lacking',
 'lackluster',
 'lacks',
 'legendary',
 'lifeless',
 'light',
 'lighthearted',
 'live laugh love',
 'loathe',
 'loathed',
 'long-awaited',
 'love',
 'loveable',
 'loved',
 'lovely',
 'ludicrous',
 'magical',
 'magnetic',
 'magnificent',
 'man written by women',
 'masterpiece',
 'mediocre',
 'melt',
 'melted',
 'melting',
 'men written by women',
 'mental breakdown',
 'mesmerizing',
 'mess',
 'mid',
 'milf',
 'misogny',
 'missing',
 'mixed feelings',
 'modern',
 'narrow-minded',
 'neutral',
 'never-before-seen',
 'new',
 'niche',
 'nit picky',
 'non-existent',
 'obsessed',
 'obsessively',
 'ordinary',
 'original',
 'outlandish',
 'outstanding',
 'overhyped',
 'overwritten',
 'painful',
 'painfully bad',
 'passionate',
 'perfect',
 'perfection',
 'period',
 'pessimistic',
 'phenomenal',
 'pleasant',
 'poor',
 'popular',
 'popularity',
 'powerful',
 'predictable',
 'prime',
 'profund',
 'promising',
 'propaganda',
 'provocative',
 'purge',
 'put it down',
 'queer',
 'questionable',
 'quirky',
 'rail',
 'rare',
 'realistic',
 'reasonable',
 'rec',
 'recommend',
 'regret',
 'regretting',
 'relatable',
 'relate',
 'remarkable',
 'repetitive',
 'repulsive',
 'rich',
 'rushed',
 'sad',
 'sass',
 'sassy',
 'screamed',
 'screaming',
 'screams',
 'sensual',
 'serve',
 'sexy',
 'shabby',
 'shameful',
 'shock',
 'shocked',
 'shocking',
 'simp',
 'simping',
 'simplicity',
 'simplistic',
 'slay',
 'slaying',
 'slow',
 'smile',
 'smiled',
 'smut',
 'solid',
 'special',
 'spite',
 'spiteful',
 'spoiled',
 'spoilers',
 'spooky',
 'steamy',
 'strong-willed',
 'struggle',
 'struggled',
 'struggling',
 'stunning',
 'stupid',
 'subtle',
 'sucker',
 'sucks',
 'sucky',
 'suffer',
 'surprise',
 'surprised',
 'surprising',
 'sweet',
 'swoon',
 'tea',
 'terrible',
 'this is a fanfiction',
 'thought-provoking',
 'timeless',
 'tired',
 'tiresome',
 'top',
 'torture',
 'touch grass',
 'touching',
 'trash',
 'traumatizing',
 'trend setting',
 'trick',
 'twist',
 'twisted',
 'ultraorthodox',
 'uncommon',
 'uncommonly',
 'underdog',
 'underwhelming',
 'uneventful',
 'unexpected',
 'unfathomable',
 'unforgettable',
 'unholy',
 'unique',
 'universal',
 'unparalleled',
 'unpleasant',
 'unpredictable',
 'unpredictably',
 'unrealistic',
 'unreasonable',
 'unrelatable',
 'unshakable',
 'unusual',
 'up-to-date',
 'useless',
 'vapid',
 'vibe check',
 'visionary',
 'vivid',
 'waste',
 'wasted potential',
 'wattpad',
 'wholesome',
 'wish that was me',
 'witty',
 'wonderful',
 'wonderfully',
 'worse',
 'worst',
 'worth',
 'worthless',
 'worthy',
 'wow',
 'you wish that was you',
 'rooting',
 'ate it up',
 'chaotic',
 'challenging',
 'slump',
 'adore'
]

reviews = reviews.loc[:, ~reviews.columns.str.contains('^Unnamed')] #delete Unnamed columns pandas
book_profiles = book_profiles.loc[:, ~book_profiles.columns.str.contains('^Unnamed')] #delete Unnamed columns pandas

links=reviews.url.unique()

def map_buzzwords(i):
    r_str=""
    for r in reviews.loc[reviews.url==i,'review'].values:
        if(not (re.match('^[0-9*#+.,> -/]+$',r))):
            r_str+=r
    new_str = re.sub(r'[^a-zA-Z]', ' ', r_str)
    re_low=[x.lower() for x in new_str.split()]
    buzzwords=', '.join(list(set(re_low).intersection(buzzwords_list)))
    print(buzzwords)
    book_profiles.loc[book_profiles.link==i, 'buzzwords']=buzzwords
    return buzzwords 

list(map(map_buzzwords, links))
#book_profiles.to_csv('data/buzzwords_test.csv')
book_profiles.to_csv('data/buzzwords.csv')
